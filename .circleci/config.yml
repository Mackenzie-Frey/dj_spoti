version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      - image: circleci/ruby:2.4.1-node # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLER_VERSION: 2.0.1
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: circleci-demo-ruby
          RAILS_ENV: test
      - image: circleci/postgres:11.1 # database image
        environment: # environment variables for database
          POSTGRES_USER: circleci-demo-ruby
          POSTGRES_DB: rails_blog
          POSTGRES_PASSWORD: ""
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: gem install bundler -v $BUNDLER_VERSION

      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Only necessary if app uses webpacker or yarn in some other way
      # - restore_cache:
      #     keys:
      #       - rails-demo-yarn-{{ checksum "yarn.lock" }}
      #       - rails-demo-yarn-
      #
      # - run:
      #     name: Yarn Install
      #     command: yarn install --cache-folder ~/.cache/yarn

      # Store yarn / webpacker cache
      # - save_cache:
      #     key: rails-demo-yarn-{{ checksum "yarn.lock" }}
      #     paths:
      #       - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace

      - run:
          name: Run rspec in parallel
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Save test results for timing analysis
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs





# version: 2
# jobs:
#   build:
#     working_directory: ~/dj_spoti
#   deploy:
#     docker:
#       - image: buildpack-deps:trusty
#
#     # steps:
#     #   - checkout
#       steps:
#         # Run rspec in parallel
#         - run: |
#             bundle exec rspec --profile 10 \
#                               --format RspecJunitFormatter \
#                               --out test_results/rspec.xml \
#                               --format progress \
#                               $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
#
#         # Save test results for timing analysis
#         - store_test_results:
#             path: test_results
#
#         # Deploy to heroku
#       - run:
#           name: Deploy Master to Heroku
#           command: |
#             git push https://heroku:$ENV['HEROKU_SECRET_KEY']@git.heroku.com/$dj-spoti.git master
#
# workflows:
#   version: 2
#   build-deploy:
#     jobs:
#       - build
#       - deploy:
#           requires:
#             - build
#           filters:
#             branches:
#               only: master
